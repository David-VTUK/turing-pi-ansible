- name: Install Helm
  ansible.builtin.shell: |
    set -o pipefail;
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    executable: /bin/bash
  when: "'server_nodes' in group_names"
  changed_when: "'server_nodes' in group_names"

- name: Move kubeconfig
  ansible.builtin.shell: |
    mkdir -p ~/.kube
    cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
    chmod 600 ~/.kube/config
  when: "'server_nodes' in group_names"
  changed_when: "'server_nodes' in group_names"


- name: Add a repository
  kubernetes.core.helm_repository:
    name: cilium
    repo_url: https://helm.cilium.io/

- name: Install Cilium
  kubernetes.core.helm:
    name: cilium
    chart_ref: cilium/cilium
    chart_version: "{{ cilium_version }}"
    release_namespace: kube-system
    wait: true
    values:
      kubeProxyReplacement: true
      k8sServiceHost: "{{ cilium_service_host }}"
      k8sServicePort: "{{ cilium_service_port }}"
      ipam:
        operator:
          clusterPoolCIDR: "{{ cilium_cluster_pool_cidr }}"
      bgpControlPlane:
        enabled: true
      hubble:
        relay:
          enabled: true
        ui:
          enabled: true
      gatewayAPI:
        enabled: true

- name: Create Cilium BGP Peering Policy Object
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cilium.io/v2alpha1
      kind: CiliumBGPClusterConfig
      metadata:
        name: default
        namespace: kube-system
      spec:
        bgpInstances:
          - name: "{{ cilium_bgp_peer_config_name }}"
            localASN: "{{ cilium_bgp_local_as }}"
            peers:
              - name: "{{ cilium_bgp_peer_config_name }}"
                peerASN: "{{ cilium_bgp_peer_as }}"
                peerAddress: "{{ cilium_bgp_peer_address }}"
                peerConfigRef:
                  name: "{{ cilium_bgp_peer_config_name }}"

- name: Create Cilium BGP Peer Config Object
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cilium.io/v2alpha1
      kind: CiliumBGPPeerConfig
      metadata:
        name: "{{ cilium_bgp_peer_config_name }}"
        namespace: kube-system
      spec:
        timers:
          holdTimeSeconds: 9
          keepAliveTimeSeconds: 3
        gracefulRestart:
          enabled: true
          restartTimeSeconds: 15
        families:
          - afi: "ipv4"
            safi: "unicast"
            advertisements:
              matchLabels:
                advertise: "bgp"

- name: Create BGP IP clusterPoolCIDR
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cilium.io/v2alpha1
      kind: CiliumLoadBalancerIPPool
      metadata:
        name: default
        namespace: kube-system
      spec:
        blocks:
          - cidr: "{{ cilium_bgp_advertise_pool }}"

# Advertise all Loadbalancer IP's
- name: Create BGP Advertisment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cilium.io/v2alpha1
      kind: CiliumBGPAdvertisement
      metadata:
        name: default
        namespace: kube-system
        labels:
          advertise: bgp
      spec:
        advertisements:
          - advertisementType: "Service"
            service:
              addresses:
                - LoadBalancerIP
            selector:
              matchExpressions:
                - key: somekey
                  operator: NotIn
                  values: ['never-used-value']

- name: Create Cillium API gateway Object
  kubernetes.core.k8s:
    definition:
      apiVersion: gateway.networking.k8s.io/v1beta1
      kind: Gateway
      metadata:
        name: "cilium-shared-gateway"
        namespace: kube-system
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
      spec:
        gatewayClassName: cilium
        listeners:
          - name: https-endpoint
            hostname: "*.lab.virtualthoughts.co.uk"
            protocol: HTTPS
            port: 443
            tls:
              mode: Terminate
              certificateRefs:
                - name: shared-gateway-wildcard-cert
                  namespace: kube-system
            allowedRoutes:
              namespaces:
                from: All
